ometa Scss <: Parser {
  selectorCharacters = ('-' | letterOrDigit)+:chars -> chars.join(''),
  selector = ('#' | '.' | ':'):pre selectorCharacters:sel -> (pre + sel)
           | selectorCharacters:sel -> sel,
  spacedSelector = space+ selector:sel -> (' ' + sel),
  fullSelector = selector:first (spacedSelector | selector)*:rest -> { self.addSelector(first + rest.join('')); },
  
  propertyValue = '$' letterOrDigit+:val -> ('$' + val.join(''))
                | ('#' | '.' | ',' | '-' | space | letterOrDigit)+:val -> val.join(''),
  property = spaces ('-' | letter)+:prop ":" spaces propertyValue:val ";" -> { self.addProperty({ name: prop.join(''), val: val }); },

  blockBody = "{" (mixinInclude | property | scssBlock)* "}" -> { self.endBlock(); },
  scssBlock = spaces fullSelector:sel blockBody,

  scssVariable = "$" letter+:name ":" spaces propertyValue:val ";" -> { self.addVariable({ name: name.join(''), val: val }); },

  mixinName = spaces ('-' | '_' | letterOrDigit)+:name -> name.join(''),
  mixinInclude = "@include" mixinName:name ";" -> { self.addInclude(name); },
  mixinDeclaration = "@mixin" mixinName:name -> { self.addMixin(name); },
  scssMixin = mixinDeclaration blockBody,

  scssFile = (scssVariable | scssMixin | scssBlock)* -> { self.getFile(); }
}

Scss.initialize = function() {
  var blocks = [],
      mixins = {},
      variables = {},
      file,
      currentBlock;
      var sys = require('sys');
var a = function(msg) {
  sys.puts('add ' + msg + ' to block "' + currentBlock.selector + '"');
};
  var createBlock = function() {
    var parentBlock = currentBlock;
    return {
      blocks: [],
      includes: [],
      properties: [],
      end: function() {
        currentBlock = parentBlock;
      }
    };
  };

  this.addMixin = function(mixinName) {
    sys.puts('adding mixin ' + mixinName);
    var block = createBlock();
    mixins[mixinName] = block;
    currentBlock = block;
  };

  this.addProperty = function(prop) {
    a('property "' + prop.name + '"');
    currentBlock.properties.push(prop);
  };

  this.addInclude = function(include) {
    a('include "' + include + '"');
    currentBlock.includes.push(include);
  };

  this.addSelector = function(sel) {
    sys.puts('adding selector ' + sel);
    var block = createBlock();
    block.selector = sel;
    currentBlock.blocks.push(block);
    currentBlock = block;
  };

  this.endBlock = function() {
    sys.puts('ending block ' + currentBlock.selector);
    currentBlock.end();
    sys.puts('rolled back to block ' + currentBlock.selector);
  };

  this.addVariable = function(variable) {
    sys.puts('adding variable ' + variable.name);
    variables[variable.name] = variable.val;
  };

  this.getFile = function() {
    return file;
  };

  file = {
    blocks: [],
    end: function() {
      currentBlock = file;
    },
    getMixin: function(mixinName) {
      return mixins[mixinName];
    },
    getValue: function(variableName) {
      return variables[variableName];
    }
  };
  currentBlock = file;
};

Scss
