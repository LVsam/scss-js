var mixins = (function() {
  var inner = {},
      that = {};

  that.add = function(mixin) {
    inner[mixin.name] = mixin.mixin;
  };

  that.getMixin = function(name) {
    return inner[name];
  };

  return that;
})();

var createMixin = function(name) {
  var blocks = [],
      properties = [],
      that = {};

  that.addProperty = function(props) {
    for(var i = 0; i < props.length; i += 1) {
      properties.push(props[i]);
    }
  };  

  that.addBlock = function(childBlocks) {
    for(var i = 0; i < childBlocks.length; i += 1) {
      blocks.push(childBlocks[i]);
    }
  };

  that.name = name;
  that.mixin = {
    properties: properties,
    blocks: blocks
  };

  return that;
};

var vars = (function() {
  var inner = {},
      that = {};

  that.add = function(props) {
    //require('sys').puts(require('sys').inspect(props));
    for(var i = 0; i < props.length; i += 1) {
      inner[props[i].name] = props[i].val;
    }
  };

  that.getVal = function(name) {
    return inner[name];
  };

  that.toString = function() {
    var css = '';
    for(var p in inner) {
      css += p + ' = ' + inner[p] + '\n';
    }
    return css;
  };

  return that;
})();

var createBlock = function(selector) {
  var blocks = [],
      imports = [],
      properties = [],
      selectors = [],
      that = {};

  var getPropertyValue = function(val) {
    if(val.indexOf('$') == 0) {
      return vars.getVal(val.replace('$', ''));
    }
    return val;
  };

  that.addProperty = function(props) {
    for(var i = 0; i < props.length; i += 1) {
      properties.push(props[i]);
    }
  };  

  that.addBlock = function(childBlocks) {
    for(var i = 0; i < childBlocks.length; i += 1) {
      blocks.push(childBlocks[i]);
    }
  };

  that.addSelectors = function(additionalSelectors) {
    for(var i = 0; i < additionalSelectors.length; i += 1) {
      selectors.push(additionalSelectors[i]);
    }
  };

  that.addImports = function(import) {
    for(var i = 0; i < import.length; i += 1) {
      imports.push(import[i]);
    }
  };

  that.toString = function(parent) {
    var parentIndent = parent.indent,
        currentIndent = parentIndent + '  ',
        paddedParentSelector = parent.selector ? parent.selector + ' ' : '',
        currentSelector = paddedParentSelector + selector,
        css = parentIndent + paddedParentSelector + selector,
        embeddedMixins = [];
    for(var mix = 0; mix < imports.length; mix += 1) {
      embeddedMixins.push(mixins.getMixin(imports[mix]));
    }
    for(var sel = 0; sel < selectors.length; sel += 1) {
      css += ',\n' + parentIndent + paddedParentSelector + selectors[sel];
    }
    css += ' {\n';
    for(var i = 0; i < properties.length; i += 1) {
      css += currentIndent + properties[i].name + ': ' + getPropertyValue(properties[i].val) + ';\n';
    }
    for(var em = 0; em < embeddedMixins.length; em += 1) {
      for(var p = 0; p < embeddedMixins[em].properties.length; p += 1) {
        css += currentIndent + embeddedMixins[em].properties[p].name + ': ' + getPropertyValue(embeddedMixins[em].properties[p].val) + ';\n';
      }
    }
    css += parentIndent + '}\n';
    for(var j = 0; j < blocks.length; j += 1) {
      css += blocks[j].toString({ indent: currentIndent, selector: currentSelector });
    }
    return css;
  };
  
  return that;
};

var file = (function() {
  var blocks = [],
      that = {};

  that.addBlocks = function(childBlocks) {
    for(var i = 0; i < childBlocks.length; i += 1) {
      blocks.push(childBlocks[i]);
    }
  };

  that.toString = function() {
    var css = '';
    //css += vars.toString() + '\n';
    for(var i = 0; i < blocks.length; i += 1) {
      css += blocks[i].toString({ indent: '', selector: '' });
      css += '\n';
    }
    return css;
  };

  return that;
})();

ometa Scss <: Parser {
  selectorCharacters = ('-' | letterOrDigit)+:chars -> chars.join(''),
  selector = ('#' | '.' | ':'):pre selectorCharacters:sel -> (pre + sel)
           | selectorCharacters:sel -> sel,
  spacedSelector = space+ selector:sel -> (' ' + sel),
  fullSelector = selector:first (spacedSelector | selector)*:rest -> (first + rest.join('')),
  mixinImport = "@include" spaces ('-' | letterOrDigit)+:name ";" -> name.join(''),
  propertyValue = '$' letterOrDigit+:val -> ('$' + val.join(''))
                | ('#' | '.' | ',' | '-' | space | letterOrDigit)+:val -> val.join(''),
  property = spaces ('-' | letter)+:prop ":" spaces propertyValue:val ";" -> ({ name: prop.join(''), val: val }),
  scssBlock = spaces fullSelector:sel ("," spaces fullSelector)*:sels "{" mixinImport*:imports property*:props scssBlock*:blocks "}" -> { var b = createBlock(sel); b.addImports(imports); b.addSelectors(sels); b.addProperty(props); b.addBlock(blocks); b },
  scssVariable = "$" letter+:name ":" spaces propertyValue:val ";" -> ({ name:name.join(''), val:val }),
  scssMixin = "@mixin" spaces ('-' | letterOrDigit)+:name "{" property*:props scssBlock*:blocks "}" -> { var m = createMixin(name.join('')); m.addProperty(props); m.addBlock(blocks); mixins.add(m); },
  scssFile = scssVariable*:scssVars scssMixin*:mixins scssBlock*:blocks -> { file.addBlocks(blocks); vars.add(scssVars); file }
}
Scss

