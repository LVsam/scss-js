var createMixin = function(name) {
  var blocks = [],
      properties = [],
      imports = [],
      that = {};

  that.addProperty = function(props) {
    for(var i = 0; i < props.length; i += 1) {
      properties.push(props[i]);
    }
  };  

  that.addBlock = function(childBlocks) {
    for(var i = 0; i < childBlocks.length; i += 1) {
      blocks.push(childBlocks[i]);
    }
  };

  that.addImport = function(import) {
    for(var i = 0; i < import.length; i += 1) {
      imports.push(import[i]);
    }
  };

  that.name = name;
  that.mixin = {
    blocks: blocks,
    properties: properties
  };

  return that;
};

var createBlock = function(selector) {
  var blocks = [],
      imports = [],
      properties = [],
      selectors = [],
      that = {};

  that.addProperty = function(props) {
    for(var i = 0; i < props.length; i += 1) {
      properties.push(props[i]);
    }
  };  

  that.addBlock = function(childBlocks) {
    for(var i = 0; i < childBlocks.length; i += 1) {
      blocks.push(childBlocks[i]);
    }
  };

  that.addSelectors = function(additionalSelectors) {
    for(var i = 0; i < additionalSelectors.length; i += 1) {
      selectors.push(additionalSelectors[i]);
    }
  };

  that.addImports = function(import) {
    for(var i = 0; i < import.length; i += 1) {
      imports.push(import[i]);
    }
  };

  that.selector = selector;
  that.blocks = blocks;
  that.mixins = imports;
  that.properties = properties;
  that.selectors = selectors;
  
  return that;
};

ometa Scss <: Parser {
  selectorCharacters = ('-' | letterOrDigit)+:chars -> chars.join(''),
  selector = ('#' | '.' | ':'):pre selectorCharacters:sel -> (pre + sel)
           | selectorCharacters:sel -> sel,
  spacedSelector = space+ selector:sel -> (' ' + sel),
  fullSelector = selector:first (spacedSelector | selector)*:rest -> (first + rest.join('')),
  mixinImport = "@include" spaces ('-' | '_' | letterOrDigit)+:name ";" -> name.join(''),
  propertyValue = '$' letterOrDigit+:val -> ('$' + val.join(''))
                | ('#' | '.' | ',' | '-' | space | letterOrDigit)+:val -> val.join(''),
  property = spaces ('-' | letter)+:prop ":" spaces propertyValue:val ";" -> ({ name: prop.join(''), val: val }),
  scssBlock = spaces fullSelector:sel ("," spaces fullSelector)*:sels "{" mixinImport*:imports property*:props scssBlock*:blocks "}" -> { var b = createBlock(sel); b.addImports(imports); b.addSelectors(sels); b.addProperty(props); b.addBlock(blocks); b },
  scssVariable = "$" letter+:name ":" spaces propertyValue:val ";" -> (self.addVariable({ name:name.join(''), val:val })),
  scssMixin = "@mixin" spaces ('-' | '_' | letterOrDigit)+:name "{" mixinImport*:imports property*:props scssBlock*:blocks "}" -> { var m = createMixin(name.join('')); m.addImport(imports); m.addProperty(props); m.addBlock(blocks); self.addMixin(m); },
  scssFile = scssVariable*:scssVars scssMixin*:mixins scssBlock*:blocks -> { self.addBlocks(blocks); self }
}

Scss.initialize = function() {
  var blocks = [],
      mixins = {},
      variables = {},
      currentBlock;

  this.addBlocks = function(childBlocks) {
    for(var i = 0; i < childBlocks.length; i += 1) {
      blocks.push(childBlocks[i]);
    }
  };

  this.blocks = blocks;

  this.addBlock = function(block) {
  };

  this.addMixin = function(mixin) {
    mixins[mixin.name] = mixin.mixin;
  };

  this.addVariable = function(variable) {
    variables[variable.name] = variable.val;
  };

  this.getMixin = function(mixinName) {
    return mixins[mixinName];
  };

  this.getValue = function(variableName) {
    return variables[variableName];
  };
};

Scss
