var vars = (function() {
  var inner = {}
      that = {};

  that.add = function(props) {
    //require('sys').puts(require('sys').inspect(props));
    for(var i = 0; i < props.length; i += 1) {
      inner[props[i].name] = props[i].val;
    }
  };

  that.getVal = function(name) {
    return inner[name];
  };

  that.toString = function() {
    var html = '';
    for(var p in inner) {
      html += p + ' = ' + inner[p] + '\n';
    }
    return html;
  };

  return that;
})();

var createBlock = function(selector) {
  var blocks = [],
      properties = [],
      that = {};

  that.addProperty = function(props) {
    for(var i = 0; i < props.length; i += 1) {
      properties.push(props[i]);
    }
  };  

  that.addBlock = function(childBlocks) {
    for(var i = 0; i < childBlocks.length; i += 1) {
      blocks.push(childBlocks[i]);
    }
  };

  that.toString = function(parent) {
    var parentIndent = parent.indent,
        currentIndent = parentIndent + '  ',
        paddedParentSelector = parent.selector ? parent.selector + ' ' : '',
        currentSelector = paddedParentSelector + selector,
        html = parentIndent + paddedParentSelector + selector + ' {\n';
    for(var i = 0; i < properties.length; i += 1) {
      html += currentIndent + properties[i].name + ': ' + properties[i].val + ';\n';
    }
    html += parentIndent + '}\n';
    for(var j = 0; j < blocks.length; j += 1) {
      html += blocks[j].toString({ indent: currentIndent, selector: currentSelector });
    }
    return html;
  };
  
  return that;
};

var file = (function() {
  var blocks = [],
      that = {};

  that.addBlocks = function(childBlocks) {
    for(var i = 0; i < childBlocks.length; i += 1) {
      blocks.push(childBlocks[i]);
    }
  };

  that.toString = function() {
    var html = '';
    //html += vars.toString() + '\n';
    for(var i = 0; i < blocks.length; i += 1) {
      html += blocks[i].toString({ indent: '', selector: '' });
      html += '\n';
    }
    return html;
  };

  return that;
})();

ometa Scss <: Parser {
  selectorCharacters = letter+:chars -> chars.join(''),
  selector = ('#' | '.' | ':'):pre selectorCharacters:sel -> (pre + sel)
           | selectorCharacters:sel -> sel,
  spacedSelector = space+ selector:sel -> (' ' + sel),
  fullSelector = selector:first (spacedSelector | selector)*:rest -> (first + rest.join('')),
  property = spaces letter+:prop ":" spaces letterOrDigit+:val ";" -> ({ name: prop.join(''), val: val.join('')}),
  scssBlock = spaces fullSelector:sel "{" property*:props scssBlock*:blocks "}" -> { var b = createBlock(sel); b.addProperty(props); b.addBlock(blocks); b },
  scssVariable = "$" letter+:name ":" spaces letterOrDigit+:val ";" -> ({ name:name.join(''), val:val.join('') }),
  scssFile = scssVariable*:scssVars scssBlock*:blocks -> { file.addBlocks(blocks); vars.add(scssVars); file }
}
Scss

